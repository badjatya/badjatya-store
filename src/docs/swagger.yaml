openapi: "3.0.0"
info:
  title: Badjatya Store
  description: A Back-end REST API project for an E-Commerce built using NodeJS, ExpressJS and MongoDB as database of the project.
  version: "1.0.0"
  contact:
    email: "architj240@gmail.com"
    url: "https://badjatya.github.io"
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: "{Protocol}://localhost:{Port}/api/{Version}"
    description: Local version of the API
    variables:
      Protocol:
        enum:
          - http
          - https
        default: http
      Port:
        enum:
          - 5000
          - 6000
          - 7000
          - 8000
        default: 5000
      Version:
        enum:
          - v1
          - v2
        default: v1

tags:
  - name: User
    description: Everything about User
    externalDocs:
      description: Find out more about user at
      url: http://swagger.io
  - name: Product
    description: Everything about Product
    externalDocs:
      description: Find out more about Product of badjatya-store at
      url: http://swagger.io
  - name: Order
    description: Everything about Order
    externalDocs:
      description: Find out more about the Order at
      url: http://swagger.io

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: token
    BearerAuth:
      type: http
      scheme: bearer
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          example: 61a24ff7ca438a5a347730f0
        name:
          type: string
          example: Abc Xyz
        email:
          type: string
          example: email@dev.com
        password:
          type: string
          example: 1234567
        role:
          type: string
          enum:
            - user
            - admin
            - manager
          example: user
        isVerifiedUser:
          type: boolean
          example: false
        photo:
          type: object
          properties:
            secureUrl:
              type: string
              example: ywz.png
            publicId:
              type: string
              example: photoId
        accountCreatedUsing:
          type: string
          enum:
            - local
            - google
            - facebook
            - github
          example: local
        google:
          type: object
          properties:
            isGoogle:
              type: boolean
              example: false
            googleId:
              type: string
              example: googleTestId
        facebook:
          type: object
          properties:
            isFacebook:
              type: boolean
              example: false
            facebookId:
              type: string
              example: facebookTestId
        github:
          type: object
          properties:
            isGithub:
              type: boolean
              example: false
            githubId:
              type: string
              example: githubTestId
        confirmEmailToken:
          type: string
        resetPasswordToken:
          type: string
        tokens:
          type: array
          items:
            type: object
            properties:
              token:
                type: string
        createdAt:
          type: string
          format: date
        updatedAt:
          type: string
          format: date

paths:
  /users/signup:
    post:
      tags:
        - User
      summary: Creates a new user, photo is optional but name, email and password are required and it sends a confirmation mail to user
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                  required: true
                  example: Ram Jain
                  minLength: 1
                  maxLength: 50
                  description: The name must be less than 50 characters
                email:
                  type: string
                  required: true
                  format: email
                  example: test@dev.com
                  minLength: 1
                  maxLength: 50
                  description: The email must be less than 50 characters
                password:
                  type: string
                  required: true
                  format: password
                  example: 1234567
                  min: 7
                  description: A password must contain at least 7 characters
                photo:
                  type: file
                  format: binary
                  description: The photo is optional but user can upload an image
      responses:
        200:
          description: A user has been created and a verification email is also sent to verify user's email address
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Email sent successfully, confirm email
        400:
          description: bad request, name, email and password are required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: name, email and password are required
        401:
          description: bad request, User already exists, please login
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: User already exists, please login
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error messages

  /users/login:
    post:
      tags:
        - User
      summary: A user who have an account can login, using email and password
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  required: true
                  format: email
                  example: test@dev.com
                  minLength: 1
                  maxLength: 50
                  description: Enter the password you have used while signup
                password:
                  type: string
                  required: true
                  format: password
                  example: 1234567
                  min: 7
                  description: Enter the password you have used while signup
      responses:
        200:
          description: success, user successfully logged in also cookie added
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYxYWNjYmYzNTlhY2RmYzk3YzVhOTNiNSIsImlhdCI6MTYzODcxNDM1NSwiZXhwIjoxNjM4ODg3MTU1fQ
                  isVerifiedUser:
                    type: boolean
                    example: false
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: 61a24ff7ca438a5a347730f0
                      name:
                        type: string
                        example: Abc Xyz
                      email:
                        type: string
                        example: email@dev.com
                      role:
                        type: string
                        enum:
                          - user
                          - admin
                          - manager
                        example: user
                      isVerifiedUser:
                        type: boolean
                        example: false
                      photo:
                        type: object
                        properties:
                          secureUrl:
                            type: string
                            example: ywz.png
                          publicId:
                            type: string
                            example: photoId
                      accountCreatedUsing:
                        type: string
                        enum:
                          - local
                          - google
                          - facebook
                          - github
                        example: local
                      google:
                        type: object
                        properties:
                          isGoogle:
                            type: boolean
                            example: false
                          googleId:
                            type: string
                            example: googleTestId
                      facebook:
                        type: object
                        properties:
                          isFacebook:
                            type: boolean
                            example: false
                          facebookId:
                            type: string
                            example: facebookTestId
                      github:
                        type: object
                        properties:
                          isGithub:
                            type: boolean
                            example: false
                          githubId:
                            type: string
                            example: githubTestId
                      createdAt:
                        type: string
                        format: date
                      updatedAt:
                        type: string
                        format: date
        400:
          description: bad request, email and password are required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: email and password are required
        401:
          description: bad request, Either email or password is incorrect
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Either email or password is incorrect
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error messages

  /users/email/confirm/{token}:
    get:
      tags:
        - User
      summary: Enter the token send to user at there email for trial mail will be sent at SMTP mail trap server
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYxYWRiYThiYmJkODgzMDNmNWRlMjVjNyIsImlhdCI6MTYzODc3NTQzNSwiZXhwIjoxNjM4Nzc2NjM1fQ
      responses:
        200:
          description: Success, User verified, you can login
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User verified, you can login
        400:
          description: Bad request, Either token invalid or expired
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Either token invalid or expired
        401:
          description: Bad request, Either token expired or invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Either token expired or invalid
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message

  /users/email/confirm/resend:
    get:
      tags:
        - User
      summary: A logged in user can re get the confirm email mail
      responses:
        200:
          description: success, Confirm email resent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Confirm email resent successfully
        400:
          description: bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Token not found, please authenticate
        401:
          description: bad request, Either token expired or invalid, please authenticate
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Either token expired or invalid, please authenticate
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message

  /users/logout:
    get:
      tags:
        - User
      summary: A logged in user can logout, the cookies are removed.
      responses:
        200:
          description: success, user logged out
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User logged out successfully
        400:
          description: bad request, Token not found, please authenticate
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Token not found, please authenticate
        401:
          description: bad request, Either token expired or invalid, please authenticate
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Either token expired or invalid, please authenticate
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message

  /users/logout/all:
    get:
      tags:
        - User
      summary: A logged in user can logout all, the cookies are removed..
      responses:
        200:
          description: success, user logged out of all instances
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User logged out of all instances successfully
        400:
          description: bad request, Token not found, please authenticate
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Token not found, please authenticate
        401:
          description: bad request, Either token expired or invalid, please authenticate
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Either token expired or invalid, please authenticate
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message

  /users/profile:
    get:
      tags:
        - User
      summary: A logged in user can view his profile
      responses:
        200:
          description: success, user profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: 61a24ff7ca438a5a347730f0
                      name:
                        type: string
                        example: Abc Xyz
                      email:
                        type: string
                        example: email@dev.com
                      role:
                        type: string
                        enum:
                          - user
                          - admin
                          - manager
                        example: user
                      isVerifiedUser:
                        type: boolean
                        example: false
                      photo:
                        type: object
                        properties:
                          secureUrl:
                            type: string
                            example: ywz.png
                          publicId:
                            type: string
                            example: photoId
                      accountCreatedUsing:
                        type: string
                        enum:
                          - local
                          - google
                          - facebook
                          - github
                        example: local
                      google:
                        type: object
                        properties:
                          isGoogle:
                            type: boolean
                            example: false
                          googleId:
                            type: string
                            example: googleTestId
                      facebook:
                        type: object
                        properties:
                          isFacebook:
                            type: boolean
                            example: false
                          facebookId:
                            type: string
                            example: facebookTestId
                      github:
                        type: object
                        properties:
                          isGithub:
                            type: boolean
                            example: false
                          githubId:
                            type: string
                            example: githubTestId
                      createdAt:
                        type: string
                        format: date
                      updatedAt:
                        type: string
                        format: date
        400:
          description: bad request, Token not found, please authenticate
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Token not found, please authenticate
        401:
          description: bad request, Either token expired or invalid, please authenticate
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Either token expired or invalid, please authenticate
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message

  /users/profile/update:
    patch:
      tags:
        - User
      summary: A logged in user can update his profile i.e name and email
      responses:
        200:
          description: success, user profile updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User profile updated
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: 61a24ff7ca438a5a347730f0
                      name:
                        type: string
                        example: Abc Xyz
                      email:
                        type: string
                        example: email@dev.com
                      role:
                        type: string
                        enum:
                          - user
                          - admin
                          - manager
                        example: user
                      isVerifiedUser:
                        type: boolean
                        example: false
                      photo:
                        type: object
                        properties:
                          secureUrl:
                            type: string
                            example: ywz.png
                          publicId:
                            type: string
                            example: photoId
                      accountCreatedUsing:
                        type: string
                        enum:
                          - local
                          - google
                          - facebook
                          - github
                        example: local
                      google:
                        type: object
                        properties:
                          isGoogle:
                            type: boolean
                            example: false
                          googleId:
                            type: string
                            example: googleTestId
                      facebook:
                        type: object
                        properties:
                          isFacebook:
                            type: boolean
                            example: false
                          facebookId:
                            type: string
                            example: facebookTestId
                      github:
                        type: object
                        properties:
                          isGithub:
                            type: boolean
                            example: false
                          githubId:
                            type: string
                            example: githubTestId
                      createdAt:
                        type: string
                        format: date
                      updatedAt:
                        type: string
                        format: date
        400:
          description: bad request, Token not found, please authenticate
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Token not found, please authenticate
        401:
          description: bad request, Either token expired or invalid, please authenticate
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Either token expired or invalid, please authenticate
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message

  /users/profile/password/update:
    patch:
      tags:
        - User
      summary: A logged in user can update his password, required oldPassword and newPassword
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - oldPassword
                - newPassword
              properties:
                oldPassword:
                  type: string
                  required: true
                  format: password
                  example: 1234567
                  minLength: 7
                  description: Enter the old password, and password should be at least 7 characters long
                newPassword:
                  type: string
                  required: true
                  format: password
                  example: 12345678
                  minLength: 7
                  description: Enter the new password, and password should be at least 7 characters long
      responses:
        200:
          description: success, user's password updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Updated user's password
        400:
          description: bad request, oldPassword and newPassword are required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: oldPassword and newPassword are required
        401:
          description: bad request, Password is incorrect or invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Password is incorrect or invalid
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message

  /users/profile/photo/update:
    patch:
      tags:
        - User
      summary: A logged in user can update his profile photo, required photo
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - photo
              properties:
                photo:
                  type: file
                  required: true
                  format: binary
                  description: Enter the new image to update the user profile
      responses:
        200:
          description: success, Updated user's profile photo
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Updated user's profile photo
        400:
          description: bad request, For updating profile, photo is required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: For updating profile, photo is required
        401:
          description: bad request, Either token expired or invalid, please authenticate
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Either token expired or invalid, please authenticate
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message

  /users/profile/photo/delete:
    delete:
      tags:
        - User
      summary: A logged in user can delete his profile photo, only if photo is present
      responses:
        200:
          description: success, Removed user's profile photo
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Deleted user's profile photo
        400:
          description: bad request, No profile photo found for deleting
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: No profile photo found for deleting
        401:
          description: bad request, Either token expired or invalid, please authenticate
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Either token expired or invalid, please authenticate
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message
