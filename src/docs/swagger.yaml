openapi: "3.0.0"
info:
  title: Badjatya Store
  description: A Back-end REST API project for an E-Commerce built using NodeJS, ExpressJS and MongoDB as database of the project.
  version: "1.0.0"
  contact:
    email: "architj240@gmail.com"
    url: "https://badjatya.github.io"
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: "{Protocol}://localhost:{Port}/api/{Version}"
    description: Local version of the API
    variables:
      Protocol:
        enum:
          - http
          - https
        default: http
      Port:
        enum:
          - "5000"
          - "6000"
          - "7000"
          - "8000"
        default: "5000"
      Version:
        enum:
          - v1
          - v2
        default: v1

  - url: "https://badjatya-store.herokuapp.com/api/{Version}"
    description: Hosted version of the API
    variables:
      Version:
        enum:
          - v1
          - v2
        default: v1

tags:
  - name: User
    description: Everything about User
    externalDocs:
      description: Find out more about user at
      url: http://swagger.io
  # - name: Product
  #   description: Everything about Product
  #   externalDocs:
  #     description: Find out more about Product of badjatya-store at
  #     url: http://swagger.io
  # - name: Order
  #   description: Everything about Order
  #   externalDocs:
  #     description: Find out more about the Order at
  #     url: http://swagger.io

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: token
    BearerAuth:
      type: http
      scheme: bearer
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          example: 61a24ff7ca438a5a347730f0
        name:
          type: string
          example: Abc Xyz
        email:
          type: string
          example: email@dev.com
        password:
          type: string
          example: 1234567
        role:
          type: string
          enum:
            - user
            - admin
            - manager
            - userManager
            - productManager
            - orderManager
          example: user
        isVerifiedUser:
          type: boolean
          example: false
        photo:
          type: object
          properties:
            secureUrl:
              type: string
              example: ywz.png
            publicId:
              type: string
              example: photoId
        accountCreatedUsing:
          type: string
          enum:
            - local
            - google
            - facebook
            - github
          example: local
        socialLoginId:
          type: string
          example: Id provided by social login
        referId:
          type: string
          example: -f-G30c_YLixsr5w7OR3i
        balance:
          type: number
          example: 0
        confirmEmailToken:
          type: string
        resetPasswordToken:
          type: string
        tokens:
          type: array
          items:
            type: object
            properties:
              token:
                type: string
        createdAt:
          type: string
          format: date
        updatedAt:
          type: string
          format: date
    Product:
      type: object
      properties:
        _id:
          type: string
          example: 61a24ff7ca438a5a347730f0
        name:
          type: string
          example: Product name
        shortDescription:
          type: string
          example: This is a good product
        longDescription:
          type: string
          example: This is a very very good product
        price:
          type: number
          example: 599
        mrp:
          type: number
          example: 799
        inStock:
          type: boolean
          example: true
        thumbnail:
          type: object
          properties:
            publicId:
              type: string
            secureUrl:
              type: string
        clothMaterial:
          type: string
          example: silk
        careMethod:
          type: string
          example: wash daily
        category:
          type: string
          example: 61a24ff7ca438a5a347730f0
        user:
          type: string
          example: 61a24ff7ca438a5a347730f0
        brand:
          type: string
          example: 61a24ff7ca438a5a347730f0
        sizes:
          type: array
          items:
            type: string
            example: ["s", "l"]
        colors:
          type: array
          items:
            type: string
            example: ["#000", "#fff"]
        stock:
          type: number
          example: 10
        images:
          type: array
          items:
            type: object
            properties:
              publicId:
                type: string
              secureUrl:
                type: string
        rating:
          type: number
          example: 4.5
        numberOfReviews:
          type: number
          example: 10
        __v:
          type: string
        createdAt:
          type: string
          format: date
        updatedAt:
          type: string
          format: date
    Category:
      type: object
      properties:
        categoryName:
          type: string
          example: T-Shirt
        gender:
          type: string
          example: Men
          enum:
            - Men
            - Women
            - Boy
            - Girl
        categoryType:
          type: string
          example: top wear
          enum:
            - top wear
            - bottom wear
            - accessories
            - ethnic fusion wear
            - regional
        createdBy:
          type: string
          example: 61a24ff7ca438a5a347730f0
    Brand:
      type: object
      properties:
        name:
          type: string
          example: Nike
        description:
          type: string
          example: Its a nice brand
        active:
          type: boolean
          example: true
        createdBy:
          type: boolean
          example: 61a24ff7ca438a5a347730f0
    Image:
      type: object
      properties:
        publicId:
          type: string
        secureUrl:
          type: string
    Review:
      type: object
      properties:
        user:
          type: string
        product:
          type: string
        name:
          type: string
        star:
          type: number
        comment:
          type: string
        createdAt:
          type: string
          format: date
        updatedAt:
          type: string
          format: date
    Discount:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        user:
          type: string
        discountPercentage:
          type: number
        available:
          type: boolean
        createdAt:
          type: string
          format: date
        updatedAt:
          type: string
          format: date
    Shipping:
      type: object
      properties:
        phoneNumber:
          type: number
        user:
          type: string
        alternatePhoneNumber:
          type: number
        addressLineOne:
          type: string
        addressLineTwo:
          type: string
        createdAt:
          type: string
          format: date
        updatedAt:
          type: string
          format: date

paths:
  # User
  /users/signup:
    post:
      tags:
        - User
      summary: Creates a new user, photo is optional but name, email and password are required and it sends a confirmation mail to user
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                  example: Ram Jain
                  minLength: 1
                  maxLength: 50
                  description: The name must be less than 50 characters
                email:
                  type: string
                  format: email
                  example: test@dev.com
                  minLength: 1
                  maxLength: 50
                  description: The email must be less than 50 characters
                password:
                  type: string
                  format: password
                  example: 1234567
                  description: A password must contain at least 7 characters
                photo:
                  type: file
                  format: binary
                  description: The photo is optional but user can upload an image
                referBy:
                  type: string
                  example: -f-G30c_YLixsr5w7OR3i
                  description: If the user has got a refer so enter the refer Id both the user will get 50rs a refer bonus.
      responses:
        200:
          description: A user has been created and a verification email is also sent to verify user's email address
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Email sent successfully, confirm email
        400:
          description: bad request, name, email and password are required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: name, email and password are required
        401:
          description: bad request, User already exists, please login
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: User already exists, please login
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error messages

  /users/login:
    post:
      tags:
        - User
      summary: A user who have an account can login, using email and password
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  required: true
                  format: email
                  example: test@dev.com
                  minLength: 1
                  maxLength: 50
                  description: Enter the password you have used while signup
                password:
                  type: string
                  required: true
                  format: password
                  example: 1234567
                  min: 7
                  description: Enter the password you have used while signup
      responses:
        200:
          description: success, user successfully logged in also cookie added
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYxYWNjYmYzNTlhY2RmYzk3YzVhOTNiNSIsImlhdCI6MTYzODcxNDM1NSwiZXhwIjoxNjM4ODg3MTU1fQ
                  isVerifiedUser:
                    type: boolean
                    example: false
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: 61a24ff7ca438a5a347730f0
                      name:
                        type: string
                        example: Abc Xyz
                      email:
                        type: string
                        example: email@dev.com
                      role:
                        type: string
                        enum:
                          - user
                          - admin
                          - manager
                        example: user
                      isVerifiedUser:
                        type: boolean
                        example: false
                      photo:
                        type: object
                        properties:
                          secureUrl:
                            type: string
                            example: ywz.png
                          publicId:
                            type: string
                            example: photoId
                      accountCreatedUsing:
                        type: string
                        enum:
                          - local
                          - google
                          - facebook
                          - github
                        example: local
                      socialLoginId:
                        type: string
                      referId:
                        type: string
                        example: -f-G30c_YLixsr5w7OR3i
                      balance:
                        type: number
                        example: 0
                      createdAt:
                        type: string
                        format: date
                      updatedAt:
                        type: string
                        format: date
        400:
          description: bad request, email and password are required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: email and password are required
        401:
          description: bad request, Either email or password is incorrect
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Either email or password is incorrect
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error messages

  /users/google:
    get:
      tags:
        - User
      summary: A user can login using google, this route cant be executed in API DOCS
      responses:
        200:
          description: success, user successfully logged using google auth and cookie added
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYxYWNjYmYzNTlhY2RmYzk3YzVhOTNiNSIsImlhdCI6MTYzODcxNDM1NSwiZXhwIjoxNjM4ODg3MTU1fQ
                  isVerifiedUser:
                    type: boolean
                    example: true
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: 61a24ff7ca438a5a347730f0
                      name:
                        type: string
                        example: Abc Xyz
                      email:
                        type: string
                        example: email@dev.com
                      role:
                        type: string
                        enum:
                          - user
                          - admin
                          - manager
                        example: user
                      isVerifiedUser:
                        type: boolean
                        example: true
                      photo:
                        type: object
                        properties:
                          secureUrl:
                            type: string
                            example: ywz.png
                          publicId:
                            type: string
                            example: photoId
                      accountCreatedUsing:
                        type: string
                        enum:
                          - local
                          - google
                          - facebook
                          - github
                        example: google
                      socialLoginId:
                        type: string
                      createdAt:
                        type: string
                        format: date
                      updatedAt:
                        type: string
                        format: date
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error messages

  /users/facebook:
    get:
      tags:
        - User
      summary: A user can login using facebook, this route cant be executed in API DOCS
      responses:
        200:
          description: success, user successfully logged using facebook auth and cookie added
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYxYWNjYmYzNTlhY2RmYzk3YzVhOTNiNSIsImlhdCI6MTYzODcxNDM1NSwiZXhwIjoxNjM4ODg3MTU1fQ
                  isVerifiedUser:
                    type: boolean
                    example: true
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: 61a24ff7ca438a5a347730f0
                      name:
                        type: string
                        example: Abc Xyz
                      email:
                        type: string
                        example: email@dev.com
                      role:
                        type: string
                        enum:
                          - user
                          - admin
                          - manager
                        example: user
                      isVerifiedUser:
                        type: boolean
                        example: true
                      photo:
                        type: object
                        properties:
                          secureUrl:
                            type: string
                            example: ywz.png
                          publicId:
                            type: string
                            example: photoId
                      accountCreatedUsing:
                        type: string
                        enum:
                          - local
                          - google
                          - facebook
                          - github
                        example: facebook
                      socialLoginId:
                        type: string
                      createdAt:
                        type: string
                        format: date
                      updatedAt:
                        type: string
                        format: date
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error messages

  /users/github:
    get:
      tags:
        - User
      summary: A user can login using github, this route cant be executed in API DOCS
      responses:
        200:
          description: success, user successfully logged using github auth and cookie added
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYxYWNjYmYzNTlhY2RmYzk3YzVhOTNiNSIsImlhdCI6MTYzODcxNDM1NSwiZXhwIjoxNjM4ODg3MTU1fQ
                  isVerifiedUser:
                    type: boolean
                    example: true
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: 61a24ff7ca438a5a347730f0
                      name:
                        type: string
                        example: Abc Xyz
                      email:
                        type: string
                        example: email@dev.com
                      role:
                        type: string
                        enum:
                          - user
                          - admin
                          - manager
                        example: user
                      isVerifiedUser:
                        type: boolean
                        example: true
                      photo:
                        type: object
                        properties:
                          secureUrl:
                            type: string
                            example: ywz.png
                          publicId:
                            type: string
                            example: photoId
                      accountCreatedUsing:
                        type: string
                        enum:
                          - local
                          - google
                          - facebook
                          - github
                        example: github
                      socialLoginId:
                        type: string
                      createdAt:
                        type: string
                        format: date
                      updatedAt:
                        type: string
                        format: date
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error messages

  /users/email/confirm/{token}:
    get:
      tags:
        - User
      summary: Enter the token send to user at there email for trial mail will be sent at SMTP mail trap server
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYxYWRiYThiYmJkODgzMDNmNWRlMjVjNyIsImlhdCI6MTYzODc3NTQzNSwiZXhwIjoxNjM4Nzc2NjM1fQ
      responses:
        200:
          description: Success, User verified, you can login
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User verified, you can login
        400:
          description: Bad request, Either token invalid or expired
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Either token invalid or expired
        401:
          description: Bad request, Either token expired or invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Either token expired or invalid
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message

  /users/email/confirm/resend:
    get:
      tags:
        - User
      summary: A logged in user can re get the confirm email mail
      responses:
        200:
          description: success, Confirm email resent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Confirm email resent successfully
        400:
          description: bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Token not found, please authenticate
        401:
          description: bad request, Either token expired or invalid, please authenticate
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Either token expired or invalid, please authenticate
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message

  /users/logout:
    get:
      tags:
        - User
      summary: A logged in user can logout, the cookies are removed.
      responses:
        200:
          description: success, user logged out
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User logged out successfully
        400:
          description: bad request, Token not found, please authenticate
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Token not found, please authenticate
        401:
          description: bad request, Either token expired or invalid, please authenticate
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Either token expired or invalid, please authenticate
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message

  /users/logout/all:
    get:
      tags:
        - User
      summary: A logged in user can logout all, the cookies are removed..
      responses:
        200:
          description: success, user logged out of all instances
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User logged out of all instances successfully
        400:
          description: bad request, Token not found, please authenticate
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Token not found, please authenticate
        401:
          description: bad request, Either token expired or invalid, please authenticate
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Either token expired or invalid, please authenticate
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message

  /users/profile:
    get:
      tags:
        - User
      summary: A logged in user can view his profile
      responses:
        200:
          description: success, user profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: 61a24ff7ca438a5a347730f0
                      name:
                        type: string
                        example: Abc Xyz
                      email:
                        type: string
                        example: email@dev.com
                      role:
                        type: string
                        enum:
                          - user
                          - admin
                          - manager
                        example: user
                      isVerifiedUser:
                        type: boolean
                        example: false
                      photo:
                        type: object
                        properties:
                          secureUrl:
                            type: string
                            example: ywz.png
                          publicId:
                            type: string
                            example: photoId
                      accountCreatedUsing:
                        type: string
                        enum:
                          - local
                          - google
                          - facebook
                          - github
                        example: local
                      socialLoginId:
                        type: string
                      referId:
                        type: string
                        example: -f-G30c_YLixsr5w7OR3i
                      balance:
                        type: number
                        example: 0
                      createdAt:
                        type: string
                        format: date
                      updatedAt:
                        type: string
                        format: date
        400:
          description: bad request, Token not found, please authenticate
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Token not found, please authenticate
        401:
          description: bad request, Either token expired or invalid, please authenticate
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Either token expired or invalid, please authenticate
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message

  /users/profile/update:
    patch:
      tags:
        - User
      summary: A logged in user can update his profile i.e name and email
      responses:
        200:
          description: success, user profile updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User profile updated
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: 61a24ff7ca438a5a347730f0
                      name:
                        type: string
                        example: Abc Xyz
                      email:
                        type: string
                        example: email@dev.com
                      role:
                        type: string
                        enum:
                          - user
                          - admin
                          - manager
                        example: user
                      isVerifiedUser:
                        type: boolean
                        example: false
                      photo:
                        type: object
                        properties:
                          secureUrl:
                            type: string
                            example: ywz.png
                          publicId:
                            type: string
                            example: photoId
                      accountCreatedUsing:
                        type: string
                        enum:
                          - local
                          - google
                          - facebook
                          - github
                        example: local
                      google:
                        type: object
                        properties:
                          isGoogle:
                            type: boolean
                            example: false
                          googleId:
                            type: string
                            example: googleTestId
                      facebook:
                        type: object
                        properties:
                          isFacebook:
                            type: boolean
                            example: false
                          facebookId:
                            type: string
                            example: facebookTestId
                      github:
                        type: object
                        properties:
                          isGithub:
                            type: boolean
                            example: false
                          githubId:
                            type: string
                            example: githubTestId
                      createdAt:
                        type: string
                        format: date
                      updatedAt:
                        type: string
                        format: date
        400:
          description: bad request, Token not found, please authenticate
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Token not found, please authenticate
        401:
          description: bad request, Either token expired or invalid, please authenticate
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Either token expired or invalid, please authenticate
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message

  /users/profile/password/update:
    patch:
      tags:
        - User
      summary: A logged in user can update his password, required oldPassword and newPassword
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - oldPassword
                - newPassword
              properties:
                oldPassword:
                  type: string
                  required: true
                  format: password
                  example: 1234567
                  minLength: 7
                  description: Enter the old password, and password should be at least 7 characters long
                newPassword:
                  type: string
                  required: true
                  format: password
                  example: 12345678
                  minLength: 7
                  description: Enter the new password, and password should be at least 7 characters long
      responses:
        200:
          description: success, user's password updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Updated user's password
        400:
          description: bad request, oldPassword and newPassword are required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: oldPassword and newPassword are required
        401:
          description: bad request, Password is incorrect or invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Password is incorrect or invalid
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message

  /users/profile/photo/update:
    patch:
      tags:
        - User
      summary: A logged in user can update his profile photo, required photo
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - photo
              properties:
                photo:
                  type: file
                  required: true
                  format: binary
                  description: Enter the new image to update the user profile
      responses:
        200:
          description: success, Updated user's profile photo
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Updated user's profile photo
        400:
          description: bad request, For updating profile, photo is required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: For updating profile, photo is required
        401:
          description: bad request, Either token expired or invalid, please authenticate
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Either token expired or invalid, please authenticate
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message

  /users/profile/photo/delete:
    delete:
      tags:
        - User
      summary: A logged in user can delete his profile photo, only if photo is present
      responses:
        200:
          description: success, Removed user's profile photo
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Deleted user's profile photo
        400:
          description: bad request, No profile photo found for deleting
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: No profile photo found for deleting
        401:
          description: bad request, Either token expired or invalid, please authenticate
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Either token expired or invalid, please authenticate
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message

  /users/forgot/password:
    post:
      tags:
        - User
      summary: If a user forgot's his password he will receive a confirm email
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  example: test@dev.com
                  format: email
                  required: true
                  maxLength: An email must be less than 50 characters
                  description: Enter the email of your account to proceed further and receive confirm email
      responses:
        200:
          description: success, user received an email to confirm and valid for 20 min
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Forgot password email sent successfully, valid for only 20 min
        401:
          description: Either email is incorrect or invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Either email is incorrect or invalid
        404:
          description: Email is required for forgot password
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Email is required for forgot password
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message

  /users/password/reset/{token}:
    post:
      tags:
        - User
      summary: User can create a new password for login, but have to copy the token from mail
      parameters:
        - name: token
          in: path
          type: string
          required: true
          default: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYxYWY3MmZkNmI2ZjgwNDE3ODI5M2MyNiIsImlhdCI6MTYzODg5Njg2MywiZXhwIjoxNjM4ODk4MDYzfQ.E0FyKLMDN9B3W8K8hwN3ohojrPhHujQUc35CFtUvh8o
          description: Enter the token received in mail
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - password
                - confirmPassword
              properties:
                password:
                  type: string
                  format: password
                  example: 12345678
                  description: Enter the new password
                  required: true
                  minLength: 7
                confirmPassword:
                  type: string
                  format: password
                  example: 12345678
                  description: Enter the confirm password
                  required: true
                  minLength: 7
      responses:
        200:
          description: success, The user's password is update, you can login with new credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: The user's password is update, you can login with new credentials
        400:
          description: Bad request, Either Password or confirmPassword are not matching or not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Either Password or confirmPassword are not matching or not found
        401:
          description: Token is either invalid or expired
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Token is either invalid or expired
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message

  # Admin
  /admin/users:
    get:
      tags:
        - Admin
      summary: Admin can get list of all users
      responses:
        200:
          description: success, list of all users
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  result:
                    type: string
                    example: 2
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                        name:
                          type: string
                        email:
                          type: string
                        role:
                          type: string
                        isVerifiedUser:
                          type: boolean
                        accountCreatedUsing:
                          type: string
                        referId:
                          type: string
                        balance:
                          type: number
                        createdAt:
                          type: string
                          format: date
                        updatedAt:
                          type: string
                          format: date
                        __v:
                          type: string
        400:
          description: Bad request, Token not found, please authenticate
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Token not found, please authenticate
        401:
          description: Unauthorized, You are not allowed to use this
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: You are not allowed to use this
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message

  /admin/users/managers:
    get:
      tags:
        - Admin
      summary: Admin can get list of all managers
      responses:
        200:
          description: success, list of all managers
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  result:
                    type: string
                    example: 2
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                        name:
                          type: string
                        email:
                          type: string
                        role:
                          type: string
                        isVerifiedUser:
                          type: boolean
                        accountCreatedUsing:
                          type: string
                        referId:
                          type: string
                        balance:
                          type: number
                        createdAt:
                          type: string
                          format: date
                        updatedAt:
                          type: string
                          format: date
                        __v:
                          type: string
        400:
          description: Bad request, Token not found, please authenticate
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Token not found, please authenticate
        401:
          description: Unauthorized, You are not allowed to use this
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: You are not allowed to use this
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message

  /admin/users/{id}:
    get:
      tags:
        - Admin
      summary: Admin can get detail of user based on id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
          default: 61b1d30fc943184620bc4e58
          description: Enter id of the user
      responses:
        200:
          description: success, user details
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                      isVerifiedUser:
                        type: boolean
                      accountCreatedUsing:
                        type: string
                      referId:
                        type: string
                      balance:
                        type: number
                      createdAt:
                        type: string
                        format: date
                      updatedAt:
                        type: string
                        format: date
                      __v:
                        type: string
        400:
          description: Bad request, Token not found, please authenticate
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Token not found, please authenticate
        401:
          description: Unauthorized, You are not allowed to use this
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: You are not allowed to use this
        404:
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: User not found
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message
    patch:
      tags:
        - Admin
      summary: Admin can update the role of user based on id but admin can not make a user to admin
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
          default: 61b1d30fc943184620bc4e58
          description: Enter id of the user whose role you want to update
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - role
              properties:
                role:
                  type: string
                  enum:
                    - user
                    - manager
                    - userManager
                    - productManager
                    - orderManager
                  description: Enter the role of the user
                  default: user
      responses:
        200:
          description: success, user role updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User role updated successfully
        400:
          description: Bad request, To update the role of a user, role is required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: To update the role of a user, role is required
        401:
          description: Unauthorized, Admin can not update a user to admin
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Admin can not update a user to admin
        404:
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: User not found
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message
    delete:
      tags:
        - Admin
      summary: Admin can delete the user based on id but admin can not remove an admin
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
          default: 61b1d30fc943184620bc4e58
          description: Enter id of the user whose role you want to update
      responses:
        200:
          description: success, user removed
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User deleted successfully
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: bad request
        401:
          description: Unauthorized, Admin can not remove a admin
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Admin can not remove a admin
        404:
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: User not found
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message

  # Manager
  /manager/users:
    get:
      tags:
        - Manager
      summary: Manager can get list of all users
      responses:
        200:
          description: success, list of all users
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  result:
                    type: string
                    example: 2
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                        name:
                          type: string
                        email:
                          type: string
                        role:
                          type: string
                        isVerifiedUser:
                          type: boolean
                        accountCreatedUsing:
                          type: string
                        referId:
                          type: string
                        balance:
                          type: number
                        createdAt:
                          type: string
                          format: date
                        updatedAt:
                          type: string
                          format: date
                        __v:
                          type: string
        400:
          description: Bad request, Token not found, please authenticate
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Token not found, please authenticate
        401:
          description: Unauthorized, You are not allowed to use this
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: You are not allowed to use this
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message

  /manager/users/managers:
    get:
      tags:
        - Manager
      summary: Manager can get list of all sub managers
      responses:
        200:
          description: success, list of all sub managers
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  result:
                    type: string
                    example: 2
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                        name:
                          type: string
                        email:
                          type: string
                        role:
                          type: string
                        isVerifiedUser:
                          type: boolean
                        accountCreatedUsing:
                          type: string
                        referId:
                          type: string
                        balance:
                          type: number
                        createdAt:
                          type: string
                          format: date
                        updatedAt:
                          type: string
                          format: date
                        __v:
                          type: string
        400:
          description: Bad request, Token not found, please authenticate
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Token not found, please authenticate
        401:
          description: Unauthorized, You are not allowed to use this
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: You are not allowed to use this
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message

  /manager/users/{id}:
    get:
      tags:
        - Manager
      summary: Manager can get detail of user based on id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
          default: 61b1d30fc943184620bc4e58
          description: Enter id of the user
      responses:
        200:
          description: success, user details
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                      isVerifiedUser:
                        type: boolean
                      accountCreatedUsing:
                        type: string
                      referId:
                        type: string
                      balance:
                        type: number
                      createdAt:
                        type: string
                        format: date
                      updatedAt:
                        type: string
                        format: date
                      __v:
                        type: string
        400:
          description: Bad request, Token not found, please authenticate
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Token not found, please authenticate
        401:
          description: Unauthorized, You are not allowed to use this
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: You are not allowed to use this
        404:
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: User not found
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message
    patch:
      tags:
        - Manager
      summary: Manager can update the role of user based on id but manager can not make a user a admin or manager
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
          default: 61b1d30fc943184620bc4e58
          description: Enter id of the user whose role you want to update
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - role
              properties:
                role:
                  type: string
                  enum:
                    - user
                    - userManager
                    - productManager
                    - orderManager
                  description: Enter the role of the user
                  default: user
      responses:
        200:
          description: success, user role updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User role updated successfully
        400:
          description: Bad request, To update the role of a user, role is required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: To update the role of a user, role is required
        401:
          description: Unauthorized, Manger can not update a user to admin or manager
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Manager can not update a user to admin or manager
        404:
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: User not found
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message
    delete:
      tags:
        - Manager
      summary: Manager can delete the user based on id but manager can not remove an admin or a manager
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
          default: 61b1d30fc943184620bc4e58
          description: Enter id of the user whose role you want to update
      responses:
        200:
          description: success, user removed
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User deleted successfully
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: bad request
        401:
          description: Unauthorized, Manager can not remove an admin or a manager
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Manager can not remove an admin or a manager
        404:
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: User not found
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message

  # User Manager
  /userManager/users:
    get:
      tags:
        - User Manager
      summary: userManager can get list of all users
      responses:
        200:
          description: success, list of all users
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  result:
                    type: string
                    example: 2
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                        name:
                          type: string
                        email:
                          type: string
                        role:
                          type: string
                        isVerifiedUser:
                          type: boolean
                        accountCreatedUsing:
                          type: string
                        referId:
                          type: string
                        balance:
                          type: number
                        createdAt:
                          type: string
                          format: date
                        updatedAt:
                          type: string
                          format: date
                        __v:
                          type: string
        400:
          description: Bad request, Token not found, please authenticate
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Token not found, please authenticate
        401:
          description: Unauthorized, You are not allowed to use this
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: You are not allowed to use this
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message

  /userManager/users/{id}:
    get:
      tags:
        - User Manager
      summary: Manager can get detail of user based on id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
          default: 61b1d30fc943184620bc4e58
          description: Enter id of the user
      responses:
        200:
          description: success, user details
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                      isVerifiedUser:
                        type: boolean
                      accountCreatedUsing:
                        type: string
                      referId:
                        type: string
                      balance:
                        type: number
                      createdAt:
                        type: string
                        format: date
                      updatedAt:
                        type: string
                        format: date
                      __v:
                        type: string
        400:
          description: Bad request, Token not found, please authenticate
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Token not found, please authenticate
        401:
          description: Unauthorized, You are not allowed to use this
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: You are not allowed to use this
        404:
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: User not found
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message
    patch:
      tags:
        - User Manager
      summary: User manager can update the user's details
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
          default: 61b1d30fc943184620bc4e58
          description: Enter id of the user whose role you want to update
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Enter the name
                  default: User
                email:
                  type: string
                  format: email
                  description: Enter the email
                  default: user@dev.com
      responses:
        200:
          description: success, user updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User updated successfully
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: bad request
        401:
          description: Unauthorized, you are not allowed to use this resource
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: You are not allowed to use this resource
        404:
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: User not found
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message
    delete:
      tags:
        - User Manager
      summary: Manager can delete the user based on id but only user
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
          default: 61b1d30fc943184620bc4e58
          description: Enter id of the user whose role you want to update
      responses:
        200:
          description: success, user removed
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User deleted successfully
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: bad request
        401:
          description: Unauthorized, Manager can not remove an admin or a manager
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Manager can not remove an admin or a manager
        404:
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: User not found
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message

  # Product - Category
  /product/category:
    post:
      tags:
        - Product - Category
      summary: An admin, manager or productManager can create a new category, required categoryName, categoryType and gender
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - categoryName
                - categoryType
                - gender
              properties:
                categoryName:
                  type: string
                  default: Shirt
                  description: Enter the name of the category
                  required: true
                categoryType:
                  type: string
                  default: top wear
                  description: Enter the type of the category
                  required: true
                  enum:
                    - top wear
                    - bottom wear
                    - accessories
                    - ethnic fusion wear
                    - regional wear
                gender:
                  type: string
                  default: Women
                  description: Enter the gender
                  required: true
                  enum:
                    - Men
                    - Women
                    - Boy
                    - Girl
      responses:
        201:
          description: success, Category created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  category:
                    type: object
                    properties:
                      _id:
                        type: string
                      categoryName:
                        type: string
                      categoryType:
                        type: string
                      gender:
                        type: string
                      createdBy:
                        type: string
                      __v:
                        type: string
                      createdAt:
                        type: string
                        format: date
                      updatedAt:
                        type: string
                        format: date
        400:
          description: Bad request, A category must contain categoryName, categoryType and gender
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: A category must contain categoryName, categoryType and gender
        401:
          description: Unauthorized, Category already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Category already exists
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message
    get:
      tags:
        - Product - Category
      summary: A logged in user can get list of all categories
      responses:
        200:
          description: success, Category list
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  categories:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                        categoryName:
                          type: string
                        categoryType:
                          type: string
                        gender:
                          type: string
                        createdBy:
                          type: string
                        __v:
                          type: string
                        createdAt:
                          type: string
                          format: date
                        updatedAt:
                          type: string
                          format: date
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message

  /product/category/products/{id}:
    get:
      tags:
        - Product - Category
      summary: A logged in user can get all products based on category Id
      parameters:
        - name: id
          required: true
          description: Enter the category id
          in: path
          default: 61b752aef305de70ea23ff86
      responses:
        200:
          description: success, list of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  products:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                        name:
                          type: string
                        shortDescription:
                          type: string
                        price:
                          type: number
                        mrp:
                          type: number
                        inStock:
                          type: boolean
                        thumbnail:
                          type: object
                          properties:
                            publicId:
                              type: string
                            secureUrl:
                              type: string
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
        404:
          description: Category your looking for not found, please try different id
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Category your looking for not found, please try different id
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message

  /product/category/{id}:
    get:
      tags:
        - Product - Category
      summary: A logged in user can get details of category based on Id
      parameters:
        - name: id
          required: true
          description: Enter the category id
          in: path
          default: 61b752aef305de70ea23ff86
      responses:
        200:
          description: success, Category details
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  category:
                    type: object
                    properties:
                      _id:
                        type: string
                      categoryName:
                        type: string
                      categoryType:
                        type: string
                      gender:
                        type: string
                      createdBy:
                        type: string
                      __v:
                        type: string
                      createdAt:
                        type: string
                        format: date
                      updatedAt:
                        type: string
                        format: date
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
        404:
          description: Category your looking for not found, please try different id
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Category your looking for not found, please try different id
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message
    patch:
      tags:
        - Product - Category
      summary: An admin, manager or productManager can update the category based on id
      parameters:
        - name: id
          required: true
          description: Enter the category id
          in: path
          default: 61b752aef305de70ea23ff86
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                categoryName:
                  type: string
                  default: Shirt
                  description: Enter the name of the category
                categoryType:
                  type: string
                  default: top wear
                  description: Enter the type of the category
                  enum:
                    - top wear
                    - bottom wear
                    - accessories
                    - ethnic fusion wear
                    - regional wear
                gender:
                  type: string
                  default: Women
                  description: Enter the gender
                  enum:
                    - Men
                    - Women
                    - Boy
                    - Girl
      responses:
        200:
          description: success, Category updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                    example: Category updated successfully
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
        404:
          description: Category your looking for not found, please try different id
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Category your looking for not found, please try different id
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message
    delete:
      tags:
        - Product - Category
      summary: An admin, manager or productManager can delete the category based on id, but all the products of this category will also be deleted
      parameters:
        - name: id
          required: true
          description: Enter the category id
          in: path
          default: 61b752aef305de70ea23ff86
      responses:
        200:
          description: success, Category deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                    example: Category deleted successfully
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
        404:
          description: Category your looking for not found, please try different id
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Category your looking for not found, please try different id
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message

  # Product - Brand
  /product/brand:
    post:
      tags:
        - Product - Brand
      summary: An admin, manager or productManager can create a new brand, required name and description
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - description
              properties:
                name:
                  type: string
                  default: Badjatya
                  description: Enter the name of the brand
                  required: true
                description:
                  type: string
                  default: A good brand
                  description: Enter the description about the brand
                  required: true
      responses:
        201:
          description: success, Brand created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  category:
                    type: object
                    properties:
                      _id:
                        type: string
                      name:
                        type: string
                      description:
                        type: string
                      createdBy:
                        type: string
                      __v:
                        type: string
                      createdAt:
                        type: string
                        format: date
                      updatedAt:
                        type: string
                        format: date
        400:
          description: Bad request, A brand must contain name and description
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: A brand must contain name and description
        401:
          description: Unauthorized, Brand already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Brand already exists
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message
    get:
      tags:
        - Product - Brand
      summary: A logged in user can get list of all brands
      responses:
        200:
          description: success, Brand list
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  result:
                    type: number
                  brands:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                        name:
                          type: string
                        description:
                          type: string
                        active:
                          type: boolean
                        createdBy:
                          type: string
                        __v:
                          type: string
                        createdAt:
                          type: string
                          format: date
                        updatedAt:
                          type: string
                          format: date
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message

  /product/brand/products/{id}:
    get:
      tags:
        - Product - Brand
      summary: A logged in user can get all products based on brand Id
      parameters:
        - name: id
          required: true
          description: Enter the brand id
          in: path
          default: 61b752aef305de70ea23ff86
      responses:
        200:
          description: success, list of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  products:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                        name:
                          type: string
                        shortDescription:
                          type: string
                        price:
                          type: number
                        mrp:
                          type: number
                        inStock:
                          type: boolean
                        thumbnail:
                          type: object
                          properties:
                            publicId:
                              type: string
                            secureUrl:
                              type: string
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
        404:
          description: Brand your looking for not found, please try different id
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Brand your looking for not found, please try different id
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message

  /product/brand/{id}:
    get:
      tags:
        - Product - Brand
      summary: A logged in user can get details of brand based on Id
      parameters:
        - name: id
          required: true
          description: Enter the brand id
          in: path
          default: 61b758ddb22c060aa9f97867
      responses:
        200:
          description: success, Category details
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  brand:
                    type: object
                    properties:
                      _id:
                        type: string
                      name:
                        type: string
                      description:
                        type: string
                      active:
                        type: boolean
                      createdBy:
                        type: string
                      __v:
                        type: string
                      createdAt:
                        type: string
                        format: date
                      updatedAt:
                        type: string
                        format: date
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
        404:
          description: Brand your looking for not found, please try different id
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Brand your looking for not found, please try different id
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message
    patch:
      tags:
        - Product - Brand
      summary: An admin, manager or productManager can update the brand based on id
      parameters:
        - name: id
          required: true
          description: Enter the brand id
          in: path
          default: 61b758ddb22c060aa9f97867
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  default: Badjatya
                  description: Enter the name of the brand
                description:
                  type: string
                  default: Good brand
                  description: Enter the description of the brand
                active:
                  type: boolean
                  default: true
                  description: is brand active
      responses:
        200:
          description: success, Brand updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                    example: Brand updated successfully
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
        404:
          description: Brand your looking for not found, please try different id
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Brand your looking for not found, please try different id
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message
    delete:
      tags:
        - Product - Brand
      summary: An admin, manager or productManager can delete the Brand based on id, but all the products of this brand will also be deleted
      parameters:
        - name: id
          required: true
          description: Enter the Brand id
          in: path
          default: 61b758ddb22c060aa9f97867
      responses:
        200:
          description: success, Brand deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                    example: Brand deleted successfully
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
        404:
          description: Brand your looking for not found, please try different id
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Brand your looking for not found, please try different id
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message

  # ** Product

  /product:
    post:
      tags:
        - Product
      summary: An admin, manager or productManager can create a new product
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - shortDescription
                - longDescription
                - price
                - mrp
                - clothMaterial
                - careMethod
                - brand
                - categoryName
                - categoryType
                - gender
                - stock
                - images
                - thumbnail
              properties:
                name:
                  type: string
                  default: Product One
                  description: Enter the name of the product
                  required: true
                shortDescription:
                  type: string
                  default: A good product
                  description: Enter the short description of the product
                  required: true
                longDescription:
                  type: string
                  default: A good product at a cheap rate
                  description: Enter the long description of the product
                  required: true
                price:
                  type: number
                  default: 599
                  description: Enter the price of the product
                  required: true
                mrp:
                  type: number
                  default: 799
                  description: Enter the mrp of the product
                  required: true
                clothMaterial:
                  type: string
                  default: Silk
                  description: Enter the cloth material of the product
                  required: true
                careMethod:
                  type: string
                  default: Wash, rinse
                  description: Enter the care method of the product
                  required: true
                brand:
                  type: string
                  default: Badjatya
                  description: Enter the brand of the product
                  required: true
                categoryName:
                  type: string
                  default: Shirt
                  description: Enter the name of the category for the product
                  required: true
                categoryType:
                  type: string
                  default: top wear
                  description: Enter the type of the category for the product
                  required: true
                  enum:
                    - top wear
                    - bottom wear
                    - accessories
                    - ethnic fusion wear
                    - regional wear
                gender:
                  type: string
                  default: Women
                  description: Enter the gender
                  required: true
                  enum:
                    - Men
                    - Women
                    - Boy
                    - Girl
                stock:
                  type: number
                  description: Enter the stock of the product
                  min: 0
                  default: 10
                thumbnail:
                  type: file
                  format: binary
                  in: formData
                  description: Enter the thumbnail of the product
                images:
                  type: array
                  description: The upload product images
                  items:
                    in: formData
                    type: file
                    format: binary
      responses:
        201:
          description: success, new product created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: success
                  message:
                    type: Product created
                  product:
                    type: object
                    properties:
                      _id:
                        type: string
                      name:
                        type: string
                      shortDescription:
                        type: string
                      longDescription:
                        type: string
                      price:
                        type: number
                      mrp:
                        type: number
                      inStock:
                        type: boolean
                      thumbnail:
                        type: object
                        properties:
                          publicId:
                            type: string
                          secureUrl:
                            type: string
                      clothMaterial:
                        type: string
                      careMethod:
                        type: string
                      category:
                        type: string
                      user:
                        type: string
                      brand:
                        type: string
                      sizes:
                        type: array
                        items:
                          type: string
                      colors:
                        type: array
                        items:
                          type: string
                      stock:
                        type: number
                      images:
                        type: array
                        items:
                          type: object
                          properties:
                            publicId:
                              type: string
                            secureUrl:
                              type: string
                      rating:
                        type: number
                      numberOfReviews:
                        type: number
                      __v:
                        type: string
                      createdAt:
                        type: string
                        format: date
                      updatedAt:
                        type: string
                        format: date
        400:
          description: Bad request, A Product must contain name, shortDescription, longDescription, price, mrp, thumbnail, clothMaterial, careMethod, brand,stock, images and category
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: A Product must contain name, shortDescription, longDescription, price, mrp, thumbnail, clothMaterial, careMethod, brand,stock, images and category
        401:
          description: Unauthorized, Brand or Category does not exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Unauthorized, Brand or Category does not exists
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message
    get:
      tags:
        - Product
      summary: A logged in user can access all the products, he can filter the products based on query and search also he can paginate
      parameters:
        - name: search
          description: Enter product you want to search
          in: query
          schema:
            type: string
        - name: price
          schema:
            type: string
          in: query
          description: In frontend or postman u can use price[gt]=100 (gt,gte,lt,lte) here u can only price=500
        - name: ratings
          schema:
            type: string
          in: query
          description: In frontend or postman u can use rating[gt]=3.0 (gt,gte,lt,lte) here u can only rating=4.0
        - name: limit
          schema:
            type: string
          in: query
          description: user can limit the number of products shown in per page
        - name: page
          schema:
            type: string
          in: query
          description: user can view different page
      responses:
        200:
          description: success, list of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  result:
                    type: number
                  totalProducts:
                    type: number
                  products:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                        name:
                          type: string
                        shortDescription:
                          type: string
                        price:
                          type: number
                        mrp:
                          type: number
                        inStock:
                          type: boolean
                        thumbnail:
                          type: object
                          properties:
                            publicId:
                              type: string
                            secureUrl:
                              type: string
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message

  /product/{id}:
    get:
      tags:
        - Product
      summary: A logged in user can get details of product based on Id
      parameters:
        - name: id
          required: true
          description: Enter the product id
          in: path
          default: 61bc993a389bc4909b1b25f3
      responses:
        200:
          description: success, Product details
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  product:
                    type: object
                    properties:
                      _id:
                        type: string
                      name:
                        type: string
                      shortDescription:
                        type: string
                      longDescription:
                        type: string
                      price:
                        type: number
                      mrp:
                        type: number
                      inStock:
                        type: boolean
                      clothMaterial:
                        type: string
                      careMethod:
                        type: string
                      category:
                        type: object
                        properties:
                          _id:
                            type: string
                          categoryName:
                            type: string
                          categoryType:
                            type: string
                          gender:
                            type: string
                          createdBy:
                            type: string
                          createdAt:
                            type: string
                            format: date
                          updatedAt:
                            type: string
                            format: date
                      brand:
                        type: object
                        properties:
                          _id:
                            type: string
                          name:
                            type: string
                          description:
                            type: string
                          active:
                            type: boolean
                          createdBy:
                            type: string
                          createdAt:
                            type: string
                            format: date
                          updatedAt:
                            type: string
                            format: date
                      sizes:
                        type: array
                        items:
                          type: string
                      colors:
                        type: array
                        items:
                          type: string
                      stock:
                        type: number
                      images:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: object
                              properties:
                                _id:
                                  type: string
                                publicId:
                                  type: string
                                secureUrl:
                                  type: string
                                __v:
                                  type: string
                      rating:
                        type: number
                      numberOfReviews:
                        type: number
                      createdAt:
                        type: string
                        format: date
                      updatedAt:
                        type: string
                        format: date
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
        404:
          description: Product your looking for not found, please try different id
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Product your looking for not found, please try different id
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message
    delete:
      tags:
        - Product
      summary: An Admin, manager or productManager get delete the product based on product id
      parameters:
        - name: id
          in: path
          required: true
          description: Enter the product id
          default: 61bc993a389bc4909b1b25f3
      responses:
        200:
          description: success, Product deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: success
                  message:
                    type: string
                    example: Product deleted successfully
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
        404:
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Product not found
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message

  /product/update/details/{id}:
    patch:
      tags:
        - Product
      summary: An admin, manager or productManager can update product details based on id
      parameters:
        - name: id
          in: path
          required: true
          description: Enter the product id
          default: 61b9ab687b422cb615179c6d
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Enter the name of the product
                shortDescription:
                  type: string
                  description: Enter the short description of the product
                longDescription:
                  type: string
                  description: Enter the long description of the product
                price:
                  type: number
                  description: Enter the price of the product
                mrp:
                  type: number
                  description: Enter the mrp of the product
                inStock:
                  type: boolean
                  description: True if product is available
                clothMaterial:
                  type: string
                  description: Enter the cloth material of the product
                careMethod:
                  type: string
                  description: Enter the care method of the product
                sizes:
                  type: array
                  description: Enter the size's of available of the product
                  items:
                    type: string
                colors:
                  type: array
                  description: Enter the color's of available of the product
                  items:
                    type: string
                stock:
                  type: number
                  description: Enter the stock of the product
      responses:
        200:
          description: success, Product details updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: success
                  message:
                    type: Product details updated successfully
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Bad request
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
        404:
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Product not found
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message

  /product/update/thumbnail/{id}:
    patch:
      tags:
        - Product
      summary: An admin, manager or productManager can update the product thumbnail based on id
      parameters:
        - name: id
          in: path
          required: true
          description: Enter the product id
          default: 61bc993a389bc4909b1b25f3
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - thumbnail
              properties:
                thumbnail:
                  type: file
                  format: binary
                  in: formData
                  description: Enter the thumbnail of the product
      responses:
        200:
          description: success, Product thumbnail updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: success
                  message:
                    type: Product thumbnail updated successfully
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Bad request
        401:
          description: Unauthorized, Product thumbnail updation, must contain new thumbnail
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Product thumbnail updation, must contain new thumbnail
        404:
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Product not found
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message

  /product/update/images/{id}:
    patch:
      tags:
        - Product
      summary: An admin, manager or productManager can update the product images based on id
      parameters:
        - name: id
          in: path
          required: true
          description: Enter the product id
          default: 61bc993a389bc4909b1b25f3
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - images
              properties:
                images:
                  type: array
                  description: The upload product images
                  items:
                    in: formData
                    type: file
                    format: binary
      responses:
        200:
          description: success, Product images updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: success
                  message:
                    type: Product images updated successfully
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Bad request
        401:
          description: Unauthorized, Product images updation, must contain new images
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Product images updation, must contain new images
        404:
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Product not found
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message

  /product/update/category/{id}:
    patch:
      tags:
        - Product
      summary: An admin, manager or productManager can update the product category based on id
      parameters:
        - name: id
          in: path
          required: true
          description: Enter the product id
          default: 61bc993a389bc4909b1b25f3
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - categoryName
                - categoryType
                - gender
              properties:
                categoryName:
                  type: string
                  default: Shirt
                  description: Enter the name of the category for the product
                  required: true
                categoryType:
                  type: string
                  default: top wear
                  description: Enter the type of the category for the product
                  required: true
                  enum:
                    - top wear
                    - bottom wear
                    - accessories
                    - ethnic fusion wear
                    - regional wear
                gender:
                  type: string
                  default: Women
                  description: Enter the gender
                  required: true
                  enum:
                    - Men
                    - Women
                    - Boy
                    - Girl
      responses:
        200:
          description: success, Product category updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: success
                  message:
                    type: Product category updated successfully
        400:
          description: Bad request, A Product category updation must contain categoryName, categoryType and gender
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: A Product category updation must contain categoryName, categoryType and gender
        401:
          description: Unauthorized, Category does not exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Category does not exists
        404:
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Product not found
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message

  /product/update/brand/{id}:
    patch:
      tags:
        - Product
      summary: An admin, manager or productManager can update the product brand based on id
      parameters:
        - name: id
          in: path
          required: true
          description: Enter the product id
          default: 61bc993a389bc4909b1b25f3
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - brand
              properties:
                brand:
                  type: string
                  default: Badjatya
                  description: Enter the brand of the product
                  required: true
      responses:
        200:
          description: success, Product brand updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: success
                  message:
                    type: Product brand updated successfully
        400:
          description: Bad request, "A Product brand updation must contain name of brand
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: A Product brand updation must contain name of brand
        401:
          description: Unauthorized, Brand does not exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Brand does not exists
        404:
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Product not found
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message

  # * Review
  /product/review/{id}:
    post:
      tags:
        - Product
      summary: An logged in user can post a review
      parameters:
        - name: id
          in: path
          required: true
          description: Enter the product id
          default: 61bc993a389bc4909b1b25f3
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - star
                - comment
              properties:
                star:
                  type: number
                  default: 4
                  min: 1
                  max: 5
                  description: Enter the star for the product review
                  required: true
                comment:
                  type: string
                  default: A good product
                  description: Enter the comment for the product review
                  required: true
      responses:
        200:
          description: success, Review created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: success
                  message:
                    type: Review Created
        400:
          description: Bad request, Review must contain star and comment
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Review must contain star and comment
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
        404:
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Product not found
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message
    get:
      tags:
        - Product
      summary: An logged in user can get list of all reviews of a particular product based on product id
      parameters:
        - name: id
          in: path
          required: true
          description: Enter the product id
          default: 61bc993a389bc4909b1b25f3
      responses:
        200:
          description: success, List of reviews
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: success
                  reviews:
                    type: array
                    items:
                      id:
                        type: object
                        properties:
                          _id:
                            type: string
                          user:
                            type: string
                          product:
                            type: string
                          name:
                            type: string
                          star:
                            type: number
                          comment:
                            type: string
                          createdAt:
                            type: string
                          updatedAt:
                            type: string
                      _id:
                        type: string
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
        404:
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Product not found
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message
    delete:
      tags:
        - Product
      summary: An logged in user can get delete the review of a particular product that he created based on product id
      parameters:
        - name: id
          in: path
          required: true
          description: Enter the product id
          default: 61bc993a389bc4909b1b25f3
      responses:
        200:
          description: success, Product deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: success
                  message:
                    type: string
                    example: Product deleted successfully
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
        404:
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Product not found
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message

  /product/review:
    delete:
      tags:
        - Product
      summary: An Admin, manager or productManager get delete the review of a particular product based on product id and review id
      parameters:
        - name: id
          in: path
          required: true
          description: Enter the product id
          default: 61bc993a389bc4909b1b25f3
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - productId
                - reviewId
              properties:
                productId:
                  type: string
                  default: 61bc20ce8164d599bc1005fc
                  description: Enter the product Id
                  required: true
                reviewId:
                  type: string
                  default: 61bc20ce8164d599bc1005fc
                  description: Enter the review Id
                  required: true
      responses:
        200:
          description: success, Product deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: success
                  message:
                    type: string
                    example: Product deleted successfully
        400:
          description: Bad request, For removing review, productId and reviewId are required
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: For removing review, productId and reviewId are required
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
        404:
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Product not found
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message

  # * Discount
  /discount:
    post:
      tags:
        - Discount
      summary: An Admin, manager or orderManager can create a discount.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - description
                - discountPercentage
                - available
              properties:
                name:
                  type: string
                  default: New year discount
                  description: Enter the name of the discount.
                description:
                  type: string
                  default: A new year discount for all the users
                  description: Enter the description of the discount
                discountPercentage:
                  type: number
                  default: 20
                  description: Enter the discount percentage
                available:
                  type: boolean
                  default: true
                  description: Enter is discount available
      responses:
        200:
          description: success, Discount created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: success
                  message:
                    type: string
                    example: Discount Created
        400:
          description: Bad request, A discount must contain name, description, discountPercentage and available.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: A discount must contain name, description, discountPercentage and available.
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message
    get:
      tags:
        - Discount
      summary: An Admin, manager or orderManager can get list of discounts.
      responses:
        200:
          description: success, List of discounts
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: success
                  result:
                    type: number
                    example: 5
                  discounts:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          example: 61c9d065565675f4828ca433
                        name:
                          type: string
                          example: New year discount
                        discountPercentage:
                          type: number
                          example: 20
                        available:
                          type: boolean
                          example: true
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message

  /discount/{id}:
    get:
      tags:
        - Discount
      summary: An Admin, manager or orderManager can get details of single discount
      parameters:
        - name: id
          required: true
          description: Enter the discount id
          in: path
          default: 61c9d065565675f4828ca433
      responses:
        200:
          description: success, Discount details
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  discount:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: 61c9d065565675f4828ca433
                      name:
                        type: string
                        example: New year discount
                      description:
                        type: string
                        example: New year discount
                      discountPercentage:
                        type: number
                        example: 20
                      available:
                        type: boolean
                        example: true
                      user:
                        type: string
                        example: 61c9d065565675f4828ca433
                      createdAt:
                        type: string
                        format: date
                      updatedAt:
                        type: string
                        format: date
                      __v:
                        type: string
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
        404:
          description: Discount not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Discount not found
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message
    patch:
      tags:
        - Discount
      summary: An Admin, manager or orderManager can update details of single discount
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  default: New year discount
                  description: Enter the name of the discount.
                description:
                  type: string
                  default: A new year discount for all the users
                  description: Enter the description of the discount
                available:
                  type: boolean
                  default: true
                  description: Enter is discount available
      parameters:
        - name: id
          required: true
          description: Enter the discount id
          in: path
          default: 61c9d065565675f4828ca433
      responses:
        200:
          description: success, Discount details
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
        404:
          description: Discount not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Discount not found
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message
    delete:
      tags:
        - Discount
      summary: An Admin, manager or orderManager can delete single discount
      parameters:
        - name: id
          required: true
          description: Enter the discount id
          in: path
          default: 61c9d065565675f4828ca433
      responses:
        200:
          description: success, Discount Deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: Discount Deleted
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
        404:
          description: Discount not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Discount not found
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: error message
